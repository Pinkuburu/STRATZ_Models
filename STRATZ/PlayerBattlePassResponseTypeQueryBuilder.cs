// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class PlayerBattlePassResponseTypeQueryBuilder : GraphQlQueryBuilder<PlayerBattlePassResponseTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "players", IsComplex = true, QueryBuilderType = typeof(PlayerBattlePassTypeQueryBuilder) },
                new FieldMetadata { Name = "playerCount" },
                new FieldMetadata { Name = "accountsAbove2000Count" },
                new FieldMetadata { Name = "accountsAbove1000Count" },
                new FieldMetadata { Name = "accountsAbove500Count" },
                new FieldMetadata { Name = "accountsAbove330Count" },
                new FieldMetadata { Name = "accountsAbove275Count" },
                new FieldMetadata { Name = "accountsAbove225Count" },
                new FieldMetadata { Name = "accountsAbove195Count" },
                new FieldMetadata { Name = "accountsAbove75Count" }
            };

        protected override string TypeName { get { return "PlayerBattlePassResponseType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PlayerBattlePassResponseTypeQueryBuilder WithPlayers(PlayerBattlePassTypeQueryBuilder playerBattlePassTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("players", alias, playerBattlePassTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptPlayers()
        {
            return ExceptField("players");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithPlayerCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptPlayerCount()
        {
            return ExceptField("playerCount");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithAccountsAbove2000Count(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accountsAbove2000Count", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptAccountsAbove2000Count()
        {
            return ExceptField("accountsAbove2000Count");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithAccountsAbove1000Count(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accountsAbove1000Count", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptAccountsAbove1000Count()
        {
            return ExceptField("accountsAbove1000Count");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithAccountsAbove500Count(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accountsAbove500Count", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptAccountsAbove500Count()
        {
            return ExceptField("accountsAbove500Count");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithAccountsAbove330Count(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accountsAbove330Count", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptAccountsAbove330Count()
        {
            return ExceptField("accountsAbove330Count");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithAccountsAbove275Count(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accountsAbove275Count", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptAccountsAbove275Count()
        {
            return ExceptField("accountsAbove275Count");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithAccountsAbove225Count(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accountsAbove225Count", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptAccountsAbove225Count()
        {
            return ExceptField("accountsAbove225Count");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithAccountsAbove195Count(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accountsAbove195Count", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptAccountsAbove195Count()
        {
            return ExceptField("accountsAbove195Count");
        }

        public PlayerBattlePassResponseTypeQueryBuilder WithAccountsAbove75Count(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("accountsAbove75Count", alias, new GraphQlDirective[] { include, skip });
        }

        public PlayerBattlePassResponseTypeQueryBuilder ExceptAccountsAbove75Count()
        {
            return ExceptField("accountsAbove75Count");
        }
    }
}
