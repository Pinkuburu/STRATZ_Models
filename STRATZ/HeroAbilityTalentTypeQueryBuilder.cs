// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class HeroAbilityTalentTypeQueryBuilder : GraphQlQueryBuilder<HeroAbilityTalentTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "heroId" },
                new FieldMetadata { Name = "week" },
                new FieldMetadata { Name = "bracketBasic" },
                new FieldMetadata { Name = "position" },
                new FieldMetadata { Name = "abilityId" },
                new FieldMetadata { Name = "count", IsComplex = true },
                new FieldMetadata { Name = "wins", IsComplex = true },
                new FieldMetadata { Name = "time", IsComplex = true },
                new FieldMetadata { Name = "winsAverage", IsComplex = true },
                new FieldMetadata { Name = "timeAverage", IsComplex = true }
            };

        protected override string TypeName { get { return "HeroAbilityTalentType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeroAbilityTalentTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public HeroAbilityTalentTypeQueryBuilder WithWeek(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("week", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptWeek()
        {
            return ExceptField("week");
        }

        public HeroAbilityTalentTypeQueryBuilder WithBracketBasic(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("bracketBasic", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptBracketBasic()
        {
            return ExceptField("bracketBasic");
        }

        public HeroAbilityTalentTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public HeroAbilityTalentTypeQueryBuilder WithAbilityId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("abilityId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptAbilityId()
        {
            return ExceptField("abilityId");
        }

        public HeroAbilityTalentTypeQueryBuilder WithCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("count", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptCount()
        {
            return ExceptField("count");
        }

        public HeroAbilityTalentTypeQueryBuilder WithWins(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("wins", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptWins()
        {
            return ExceptField("wins");
        }

        public HeroAbilityTalentTypeQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public HeroAbilityTalentTypeQueryBuilder WithWinsAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("winsAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptWinsAverage()
        {
            return ExceptField("winsAverage");
        }

        public HeroAbilityTalentTypeQueryBuilder WithTimeAverage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeAverage", alias, new GraphQlDirective[] { include, skip });
        }

        public HeroAbilityTalentTypeQueryBuilder ExceptTimeAverage()
        {
            return ExceptField("timeAverage");
        }
    }
}
