// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
#endif

namespace STRATZ
{
    public partial class MatchReplayUploadPlayerTypeQueryBuilder : GraphQlQueryBuilder<MatchReplayUploadPlayerTypeQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "matchId", IsComplex = true },
                new FieldMetadata { Name = "playerSlot", IsComplex = true },
                new FieldMetadata { Name = "matchUploadTeamId" },
                new FieldMetadata { Name = "steamAccountId", IsComplex = true },
                new FieldMetadata { Name = "isRadiant" },
                new FieldMetadata { Name = "isDire" },
                new FieldMetadata { Name = "teamSlot", IsComplex = true },
                new FieldMetadata { Name = "heroId", IsComplex = true },
                new FieldMetadata { Name = "kills", IsComplex = true },
                new FieldMetadata { Name = "deaths", IsComplex = true },
                new FieldMetadata { Name = "assists", IsComplex = true },
                new FieldMetadata { Name = "networth" },
                new FieldMetadata { Name = "lastHits", IsComplex = true },
                new FieldMetadata { Name = "denies", IsComplex = true },
                new FieldMetadata { Name = "goldPerMinute", IsComplex = true },
                new FieldMetadata { Name = "experiencePerMinute", IsComplex = true },
                new FieldMetadata { Name = "totalGoldSpent" },
                new FieldMetadata { Name = "goldSpentOnBuybacks" },
                new FieldMetadata { Name = "goldSpentOnConsumables" },
                new FieldMetadata { Name = "goldSpentOnItems" },
                new FieldMetadata { Name = "goldSpentOnSupport" },
                new FieldMetadata { Name = "heroDamage" },
                new FieldMetadata { Name = "towerDamage" },
                new FieldMetadata { Name = "towerKills", IsComplex = true },
                new FieldMetadata { Name = "heroHealing" },
                new FieldMetadata { Name = "level", IsComplex = true },
                new FieldMetadata { Name = "item0Id", IsComplex = true },
                new FieldMetadata { Name = "item1Id", IsComplex = true },
                new FieldMetadata { Name = "item2Id", IsComplex = true },
                new FieldMetadata { Name = "item3Id", IsComplex = true },
                new FieldMetadata { Name = "item4Id", IsComplex = true },
                new FieldMetadata { Name = "item5Id", IsComplex = true },
                new FieldMetadata { Name = "backpack0Id", IsComplex = true },
                new FieldMetadata { Name = "backpack1Id", IsComplex = true },
                new FieldMetadata { Name = "backpack2Id", IsComplex = true },
                new FieldMetadata { Name = "lane" },
                new FieldMetadata { Name = "role" },
                new FieldMetadata { Name = "position" },
                new FieldMetadata { Name = "pickOrder", IsComplex = true },
                new FieldMetadata { Name = "teamPickOrder" },
                new FieldMetadata { Name = "isVictory" },
                new FieldMetadata { Name = "stats", IsComplex = true, QueryBuilderType = typeof(MatchReplayUploadPlayerStatsTypeQueryBuilder) },
                new FieldMetadata { Name = "steamAccount", IsComplex = true, QueryBuilderType = typeof(SteamAccountTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "MatchReplayUploadPlayerType"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MatchReplayUploadPlayerTypeQueryBuilder WithMatchId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptMatchId()
        {
            return ExceptField("matchId");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithPlayerSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("playerSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptPlayerSlot()
        {
            return ExceptField("playerSlot");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithMatchUploadTeamId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("matchUploadTeamId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptMatchUploadTeamId()
        {
            return ExceptField("matchUploadTeamId");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithSteamAccountId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("steamAccountId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptSteamAccountId()
        {
            return ExceptField("steamAccountId");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithIsRadiant(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isRadiant", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptIsRadiant()
        {
            return ExceptField("isRadiant");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithIsDire(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isDire", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptIsDire()
        {
            return ExceptField("isDire");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTeamSlot(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamSlot", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTeamSlot()
        {
            return ExceptField("teamSlot");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroId", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroId()
        {
            return ExceptField("heroId");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptKills()
        {
            return ExceptField("kills");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDeaths(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deaths", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDeaths()
        {
            return ExceptField("deaths");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithAssists(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("assists", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptAssists()
        {
            return ExceptField("assists");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithNetworth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("networth", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptNetworth()
        {
            return ExceptField("networth");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLastHits(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastHits", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLastHits()
        {
            return ExceptField("lastHits");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithDenies(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("denies", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptDenies()
        {
            return ExceptField("denies");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldPerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldPerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldPerMinute()
        {
            return ExceptField("goldPerMinute");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithExperiencePerMinute(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("experiencePerMinute", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptExperiencePerMinute()
        {
            return ExceptField("experiencePerMinute");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTotalGoldSpent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalGoldSpent", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTotalGoldSpent()
        {
            return ExceptField("totalGoldSpent");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnBuybacks(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnBuybacks", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnBuybacks()
        {
            return ExceptField("goldSpentOnBuybacks");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnConsumables(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnConsumables", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnConsumables()
        {
            return ExceptField("goldSpentOnConsumables");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnItems(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnItems", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnItems()
        {
            return ExceptField("goldSpentOnItems");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithGoldSpentOnSupport(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("goldSpentOnSupport", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptGoldSpentOnSupport()
        {
            return ExceptField("goldSpentOnSupport");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroDamage()
        {
            return ExceptField("heroDamage");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTowerDamage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerDamage", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTowerDamage()
        {
            return ExceptField("towerDamage");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTowerKills(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("towerKills", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTowerKills()
        {
            return ExceptField("towerKills");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithHeroHealing(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heroHealing", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptHeroHealing()
        {
            return ExceptField("heroHealing");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem0Id()
        {
            return ExceptField("item0Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem1Id()
        {
            return ExceptField("item1Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem2Id()
        {
            return ExceptField("item2Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem3Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item3Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem3Id()
        {
            return ExceptField("item3Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem4Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item4Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem4Id()
        {
            return ExceptField("item4Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithItem5Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("item5Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptItem5Id()
        {
            return ExceptField("item5Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithBackpack0Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack0Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptBackpack0Id()
        {
            return ExceptField("backpack0Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithBackpack1Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack1Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptBackpack1Id()
        {
            return ExceptField("backpack1Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithBackpack2Id(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backpack2Id", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptBackpack2Id()
        {
            return ExceptField("backpack2Id");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithLane(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lane", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptLane()
        {
            return ExceptField("lane");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithRole(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("role", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithPosition(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("position", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptPosition()
        {
            return ExceptField("position");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithPickOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pickOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptPickOrder()
        {
            return ExceptField("pickOrder");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithTeamPickOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("teamPickOrder", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptTeamPickOrder()
        {
            return ExceptField("teamPickOrder");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithIsVictory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isVictory", alias, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptIsVictory()
        {
            return ExceptField("isVictory");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithStats(MatchReplayUploadPlayerStatsTypeQueryBuilder matchReplayUploadPlayerStatsTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stats", alias, matchReplayUploadPlayerStatsTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptStats()
        {
            return ExceptField("stats");
        }

        public MatchReplayUploadPlayerTypeQueryBuilder WithSteamAccount(SteamAccountTypeQueryBuilder steamAccountTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steamAccount", alias, steamAccountTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MatchReplayUploadPlayerTypeQueryBuilder ExceptSteamAccount()
        {
            return ExceptField("steamAccount");
        }
    }
}
